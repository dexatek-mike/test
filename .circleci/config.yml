version: 2.1

parameters:
  project-root:
    type: string
    default: "~/home/dev/app-project/sdk-ameba-v4.0d_gcc"
  project-build:
    type: string
    default: "~/home/dev/app-project/sdk-ameba-v4.0d_gcc/project/realtek_ameba1_va0_example/GCC-RELEASE"
  project-bin:
    type: string
    default: "~/home/dev/app-project/sdk-ameba-v4.0d_gcc/project/realtek_ameba1_va0_example/GCC-RELEASE/application/Debug/bin"
  artifact-out:
    type: string
    default: "~/home/dev/out"
  gen-flash-home:
    type: string
    default: "/c/Users/circleci"
  gen-flash-root:
    type: string
    default: "/c/Users/circleci/gen_flash"
  gen-flash-repo:
    type: string
    default: "https://github.com/dexatek-mike/ci-win.git"
  config-support-mp-tool:
    type: boolean
    default: false
  config-native-build:
    type: boolean
    default: true

orbs:
  win: circleci/windows@1.0.0

jobs:
  build:
    docker:
      - image: yalee104/dk-ameba1:1.1
    working_directory: ~/home/dev/app-project/
    environment:
      PATH_PROJECT_ROOT: << pipeline.parameters.project-root >>
      PATH_PROJECT_BUILD: << pipeline.parameters.project-build >>
      PATH_PROJECT_BIN: << pipeline.parameters.project-bin >>
    parameters:
      out-dir:
        type: string
        default: normal
      build-mp-tool:
        type: boolean
        default: false
      release-build:
        type: boolean
        default: false
    steps:
      - when:
          condition: << pipeline.parameters.config-native-build >>
          steps:
            - run: echo 'export NATIVE_BUILD=y' >> $BASH_ENV
      - when:
          condition: << parameters.release-build >>
          steps:
            - run: echo 'export RELEASE_BUILD=y' >> $BASH_ENV
      - when:
          condition: << parameters.build-mp-tool >>
          steps:
            - run:
                name: does not support building MP tool
                command: circleci-agent step halt
                unless: << pipeline.parameters.config-support-mp-tool >>
            - run: echo 'export BUILD_MP_TOOL=y' >> $BASH_ENV
      - checkout
      - run:
          name: Make (build project)
          #Set the directory to build the project
          working_directory: << pipeline.parameters.project-build >>
          #make to build the project
          command: |
            echo "NATIVE_BUILD=${NATIVE_BUILD}, RELEASE_BUILD=${RELEASE_BUILD}, BUILD_MP_TOOL=${BUILD_MP_TOOL}"
            make > build.log 2>&1
            mkdir << parameters.out-dir >>
            cp build.log << parameters.out-dir >>/
            cp application/Debug/bin/* -r << parameters.out-dir >>/
#            find ${PATH_PROJECT_ROOT}/release -name "A000.dat" | xargs -i cp {} ${PATH_PROJECT_BUILD}/<< parameters.out-dir >>
#            find ${PATH_PROJECT_ROOT}/release -type d -name "BLE*" | xargs -i cp {} ${PATH_PROJECT_BUILD}/<< parameters.out-dir >>
      - store_artifacts:
          path: << pipeline.parameters.project-build >>/build.log
          destination: << pipeline.parameters.artifact-out >>/build.log
      - run:
          name: build failed
          command: circleci-agent step halt
          when: on_fail
      - persist_to_workspace:
          root: << pipeline.parameters.project-build >>
          paths:
            - << parameters.out-dir >>
      - store_artifacts:
          path: << pipeline.parameters.project-bin >>
          destination: << pipeline.parameters.artifact-out >>/bin
  gen_flash_bin:
    executor:
      name: win/vs2019
      shell: bash.exe
    environment:
      PATH_HOME: << pipeline.parameters.gen-flash-home >>
      PATH_PROJECT_REPO: << pipeline.parameters.gen-flash-repo >>
      PATH_PROJECT_ROOT: << pipeline.parameters.gen-flash-root >>
    working_directory: ~
    steps:
      - unless:
          condition: << pipeline.parameters.config-support-mp-tool >>
          steps:
            - run: echo 'NO_MP_OTA=y' >> $BASH_ENV
      - attach_workspace:
          at: ~/temp
      - run:
          name: generate flah.bin
          working_directory: ~
          command: |
            repo_dir=`basename ${PATH_PROJECT_ROOT}`
            share_dir=~/temp

            cd ${PATH_HOME}
            git clone ${PATH_PROJECT_REPO} ${repo_dir}

            cd ${PATH_PROJECT_ROOT}
            mkdir -p flash_bin/normal flash_bin/release

            cp ${share_dir}/normal/* ./ -r
            if [[ ${NO_MP_OTA} == 'y' ]] ; then
              cp ota.bin mp_ota.bin
            else
              echo "no mp-tool image; use ota.bin"
              cp ${share_dir}/mp_tool/ota.bin mp_ota.bin
            fi
            sh gen_flash_bin.sh
            cp flash.bin flash_bin/normal/

            cp ${share_dir}/release/* ./ -r
            if [[ ${NO_MP_OTA} == 'y' ]] ; then
              cp ota.bin mp_ota.bin
            else
              echo "no mp-tool image; use ota.bin"
              cp ${share_dir}/mp_tool/ota.bin mp_ota.bin
            fi
            sh gen_flash_bin.sh
            cp flash.bin flash_bin/release/
      - run:
          name: failed to generate flash image
          command: circleci-agent step halt
          when: on_fail
      - persist_to_workspace:
          root: C:\Users\circleci\gen_flash
          paths:
            - flash_bin
      - store_artifacts:
          path: C:\Users\circleci\gen_flash\flash_bin
          destination: << pipeline.parameters.artifact-out >>/flash_bin
workflows:
  version: 2.1
  build_and_pack:
    jobs:
      - build:
          name: build_normal
          out-dir: normal
          build-mp-tool: false
          release-build: false
      - build:
          name: build_release
          out-dir: release
          build-mp-tool: false
          release-build: true
      - build:
          name: build_mp_tool
          out-dir: mp_tool
          build-mp-tool: true
          release-build: true
      - gen_flash_bin:
          name: gen_flash
          requires:
            - build_normal
            - build_release
            - build_mp_tool
